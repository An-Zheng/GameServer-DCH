// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: allmsg.proto

#ifndef PROTOBUF_INCLUDED_allmsg_2eproto
#define PROTOBUF_INCLUDED_allmsg_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_allmsg_2eproto 

namespace protobuf_allmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_allmsg_2eproto
namespace pb {
class AttackRequest;
class AttackRequestDefaultTypeInternal;
extern AttackRequestDefaultTypeInternal _AttackRequest_default_instance_;
class AttackResponse;
class AttackResponseDefaultTypeInternal;
extern AttackResponseDefaultTypeInternal _AttackResponse_default_instance_;
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class ChatBack;
class ChatBackDefaultTypeInternal;
extern ChatBackDefaultTypeInternal _ChatBack_default_instance_;
class GameServerInfo;
class GameServerInfoDefaultTypeInternal;
extern GameServerInfoDefaultTypeInternal _GameServerInfo_default_instance_;
class GameServerInfoBack;
class GameServerInfoBackDefaultTypeInternal;
extern GameServerInfoBackDefaultTypeInternal _GameServerInfoBack_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginBack;
class LoginBackDefaultTypeInternal;
extern LoginBackDefaultTypeInternal _LoginBack_default_instance_;
class PlayerList;
class PlayerListDefaultTypeInternal;
extern PlayerListDefaultTypeInternal _PlayerList_default_instance_;
class ReceiveChat;
class ReceiveChatDefaultTypeInternal;
extern ReceiveChatDefaultTypeInternal _ReceiveChat_default_instance_;
class RequestIP;
class RequestIPDefaultTypeInternal;
extern RequestIPDefaultTypeInternal _RequestIP_default_instance_;
class RequestList;
class RequestListDefaultTypeInternal;
extern RequestListDefaultTypeInternal _RequestList_default_instance_;
class ResponseIP;
class ResponseIPDefaultTypeInternal;
extern ResponseIPDefaultTypeInternal _ResponseIP_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::AttackRequest* Arena::CreateMaybeMessage<::pb::AttackRequest>(Arena*);
template<> ::pb::AttackResponse* Arena::CreateMaybeMessage<::pb::AttackResponse>(Arena*);
template<> ::pb::Chat* Arena::CreateMaybeMessage<::pb::Chat>(Arena*);
template<> ::pb::ChatBack* Arena::CreateMaybeMessage<::pb::ChatBack>(Arena*);
template<> ::pb::GameServerInfo* Arena::CreateMaybeMessage<::pb::GameServerInfo>(Arena*);
template<> ::pb::GameServerInfoBack* Arena::CreateMaybeMessage<::pb::GameServerInfoBack>(Arena*);
template<> ::pb::Login* Arena::CreateMaybeMessage<::pb::Login>(Arena*);
template<> ::pb::LoginBack* Arena::CreateMaybeMessage<::pb::LoginBack>(Arena*);
template<> ::pb::PlayerList* Arena::CreateMaybeMessage<::pb::PlayerList>(Arena*);
template<> ::pb::ReceiveChat* Arena::CreateMaybeMessage<::pb::ReceiveChat>(Arena*);
template<> ::pb::RequestIP* Arena::CreateMaybeMessage<::pb::RequestIP>(Arena*);
template<> ::pb::RequestList* Arena::CreateMaybeMessage<::pb::RequestList>(Arena*);
template<> ::pb::ResponseIP* Arena::CreateMaybeMessage<::pb::ResponseIP>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const final {
    return CreateMaybeMessage<Login>(NULL);
  }

  Login* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playername = 1;
  void clear_playername();
  static const int kPlayernameFieldNumber = 1;
  const ::std::string& playername() const;
  void set_playername(const ::std::string& value);
  #if LANG_CXX11
  void set_playername(::std::string&& value);
  #endif
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  ::std::string* mutable_playername();
  ::std::string* release_playername();
  void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:pb.Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RequestList) */ {
 public:
  RequestList();
  virtual ~RequestList();

  RequestList(const RequestList& from);

  inline RequestList& operator=(const RequestList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestList(RequestList&& from) noexcept
    : RequestList() {
    *this = ::std::move(from);
  }

  inline RequestList& operator=(RequestList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestList* internal_default_instance() {
    return reinterpret_cast<const RequestList*>(
               &_RequestList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RequestList* other);
  friend void swap(RequestList& a, RequestList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestList* New() const final {
    return CreateMaybeMessage<RequestList>(NULL);
  }

  RequestList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestList& from);
  void MergeFrom(const RequestList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RequestList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.PlayerList) */ {
 public:
  PlayerList();
  virtual ~PlayerList();

  PlayerList(const PlayerList& from);

  inline PlayerList& operator=(const PlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerList(PlayerList&& from) noexcept
    : PlayerList() {
    *this = ::std::move(from);
  }

  inline PlayerList& operator=(PlayerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerList* internal_default_instance() {
    return reinterpret_cast<const PlayerList*>(
               &_PlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayerList* other);
  friend void swap(PlayerList& a, PlayerList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerList* New() const final {
    return CreateMaybeMessage<PlayerList>(NULL);
  }

  PlayerList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerList& from);
  void MergeFrom(const PlayerList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string playernamelist = 1;
  int playernamelist_size() const;
  void clear_playernamelist();
  static const int kPlayernamelistFieldNumber = 1;
  const ::std::string& playernamelist(int index) const;
  ::std::string* mutable_playernamelist(int index);
  void set_playernamelist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_playernamelist(int index, ::std::string&& value);
  #endif
  void set_playernamelist(int index, const char* value);
  void set_playernamelist(int index, const char* value, size_t size);
  ::std::string* add_playernamelist();
  void add_playernamelist(const ::std::string& value);
  #if LANG_CXX11
  void add_playernamelist(::std::string&& value);
  #endif
  void add_playernamelist(const char* value);
  void add_playernamelist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& playernamelist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_playernamelist();

  // @@protoc_insertion_point(class_scope:pb.PlayerList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> playernamelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.LoginBack) */ {
 public:
  LoginBack();
  virtual ~LoginBack();

  LoginBack(const LoginBack& from);

  inline LoginBack& operator=(const LoginBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginBack(LoginBack&& from) noexcept
    : LoginBack() {
    *this = ::std::move(from);
  }

  inline LoginBack& operator=(LoginBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginBack* internal_default_instance() {
    return reinterpret_cast<const LoginBack*>(
               &_LoginBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LoginBack* other);
  friend void swap(LoginBack& a, LoginBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginBack* New() const final {
    return CreateMaybeMessage<LoginBack>(NULL);
  }

  LoginBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginBack& from);
  void MergeFrom(const LoginBack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .pb.PlayerList playerlist = 2;
  bool has_playerlist() const;
  void clear_playerlist();
  static const int kPlayerlistFieldNumber = 2;
  private:
  const ::pb::PlayerList& _internal_playerlist() const;
  public:
  const ::pb::PlayerList& playerlist() const;
  ::pb::PlayerList* release_playerlist();
  ::pb::PlayerList* mutable_playerlist();
  void set_allocated_playerlist(::pb::PlayerList* playerlist);

  // int32 succ = 1;
  void clear_succ();
  static const int kSuccFieldNumber = 1;
  ::google::protobuf::int32 succ() const;
  void set_succ(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.LoginBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::pb::PlayerList* playerlist_;
  ::google::protobuf::int32 succ_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.GameServerInfo) */ {
 public:
  GameServerInfo();
  virtual ~GameServerInfo();

  GameServerInfo(const GameServerInfo& from);

  inline GameServerInfo& operator=(const GameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServerInfo(GameServerInfo&& from) noexcept
    : GameServerInfo() {
    *this = ::std::move(from);
  }

  inline GameServerInfo& operator=(GameServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServerInfo* internal_default_instance() {
    return reinterpret_cast<const GameServerInfo*>(
               &_GameServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GameServerInfo* other);
  friend void swap(GameServerInfo& a, GameServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServerInfo* New() const final {
    return CreateMaybeMessage<GameServerInfo>(NULL);
  }

  GameServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameServerInfo& from);
  void MergeFrom(const GameServerInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string IPaddress = 3;
  void clear_ipaddress();
  static const int kIPaddressFieldNumber = 3;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // int32 curload = 1;
  void clear_curload();
  static const int kCurloadFieldNumber = 1;
  ::google::protobuf::int32 curload() const;
  void set_curload(::google::protobuf::int32 value);

  // int32 maxload = 2;
  void clear_maxload();
  static const int kMaxloadFieldNumber = 2;
  ::google::protobuf::int32 maxload() const;
  void set_maxload(::google::protobuf::int32 value);

  // int32 portNum = 4;
  void clear_portnum();
  static const int kPortNumFieldNumber = 4;
  ::google::protobuf::int32 portnum() const;
  void set_portnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GameServerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::int32 curload_;
  ::google::protobuf::int32 maxload_;
  ::google::protobuf::int32 portnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameServerInfoBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.GameServerInfoBack) */ {
 public:
  GameServerInfoBack();
  virtual ~GameServerInfoBack();

  GameServerInfoBack(const GameServerInfoBack& from);

  inline GameServerInfoBack& operator=(const GameServerInfoBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameServerInfoBack(GameServerInfoBack&& from) noexcept
    : GameServerInfoBack() {
    *this = ::std::move(from);
  }

  inline GameServerInfoBack& operator=(GameServerInfoBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerInfoBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameServerInfoBack* internal_default_instance() {
    return reinterpret_cast<const GameServerInfoBack*>(
               &_GameServerInfoBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GameServerInfoBack* other);
  friend void swap(GameServerInfoBack& a, GameServerInfoBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameServerInfoBack* New() const final {
    return CreateMaybeMessage<GameServerInfoBack>(NULL);
  }

  GameServerInfoBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameServerInfoBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameServerInfoBack& from);
  void MergeFrom(const GameServerInfoBack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerInfoBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 succ = 1;
  void clear_succ();
  static const int kSuccFieldNumber = 1;
  ::google::protobuf::int32 succ() const;
  void set_succ(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GameServerInfoBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 succ_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestIP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.RequestIP) */ {
 public:
  RequestIP();
  virtual ~RequestIP();

  RequestIP(const RequestIP& from);

  inline RequestIP& operator=(const RequestIP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestIP(RequestIP&& from) noexcept
    : RequestIP() {
    *this = ::std::move(from);
  }

  inline RequestIP& operator=(RequestIP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestIP* internal_default_instance() {
    return reinterpret_cast<const RequestIP*>(
               &_RequestIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RequestIP* other);
  friend void swap(RequestIP& a, RequestIP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestIP* New() const final {
    return CreateMaybeMessage<RequestIP>(NULL);
  }

  RequestIP* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestIP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestIP& from);
  void MergeFrom(const RequestIP& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestIP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.RequestIP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseIP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ResponseIP) */ {
 public:
  ResponseIP();
  virtual ~ResponseIP();

  ResponseIP(const ResponseIP& from);

  inline ResponseIP& operator=(const ResponseIP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseIP(ResponseIP&& from) noexcept
    : ResponseIP() {
    *this = ::std::move(from);
  }

  inline ResponseIP& operator=(ResponseIP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseIP* internal_default_instance() {
    return reinterpret_cast<const ResponseIP*>(
               &_ResponseIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResponseIP* other);
  friend void swap(ResponseIP& a, ResponseIP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseIP* New() const final {
    return CreateMaybeMessage<ResponseIP>(NULL);
  }

  ResponseIP* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseIP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseIP& from);
  void MergeFrom(const ResponseIP& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseIP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string IPaddress = 1;
  void clear_ipaddress();
  static const int kIPaddressFieldNumber = 1;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // int32 portNum = 2;
  void clear_portnum();
  static const int kPortNumFieldNumber = 2;
  ::google::protobuf::int32 portnum() const;
  void set_portnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ResponseIP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::int32 portnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttackRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AttackRequest) */ {
 public:
  AttackRequest();
  virtual ~AttackRequest();

  AttackRequest(const AttackRequest& from);

  inline AttackRequest& operator=(const AttackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttackRequest(AttackRequest&& from) noexcept
    : AttackRequest() {
    *this = ::std::move(from);
  }

  inline AttackRequest& operator=(AttackRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttackRequest* internal_default_instance() {
    return reinterpret_cast<const AttackRequest*>(
               &_AttackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AttackRequest* other);
  friend void swap(AttackRequest& a, AttackRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttackRequest* New() const final {
    return CreateMaybeMessage<AttackRequest>(NULL);
  }

  AttackRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttackRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttackRequest& from);
  void MergeFrom(const AttackRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string offendername = 1;
  void clear_offendername();
  static const int kOffendernameFieldNumber = 1;
  const ::std::string& offendername() const;
  void set_offendername(const ::std::string& value);
  #if LANG_CXX11
  void set_offendername(::std::string&& value);
  #endif
  void set_offendername(const char* value);
  void set_offendername(const char* value, size_t size);
  ::std::string* mutable_offendername();
  ::std::string* release_offendername();
  void set_allocated_offendername(::std::string* offendername);

  // string attackername = 2;
  void clear_attackername();
  static const int kAttackernameFieldNumber = 2;
  const ::std::string& attackername() const;
  void set_attackername(const ::std::string& value);
  #if LANG_CXX11
  void set_attackername(::std::string&& value);
  #endif
  void set_attackername(const char* value);
  void set_attackername(const char* value, size_t size);
  ::std::string* mutable_attackername();
  ::std::string* release_attackername();
  void set_allocated_attackername(::std::string* attackername);

  // @@protoc_insertion_point(class_scope:pb.AttackRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr offendername_;
  ::google::protobuf::internal::ArenaStringPtr attackername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttackResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.AttackResponse) */ {
 public:
  AttackResponse();
  virtual ~AttackResponse();

  AttackResponse(const AttackResponse& from);

  inline AttackResponse& operator=(const AttackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttackResponse(AttackResponse&& from) noexcept
    : AttackResponse() {
    *this = ::std::move(from);
  }

  inline AttackResponse& operator=(AttackResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttackResponse* internal_default_instance() {
    return reinterpret_cast<const AttackResponse*>(
               &_AttackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AttackResponse* other);
  friend void swap(AttackResponse& a, AttackResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttackResponse* New() const final {
    return CreateMaybeMessage<AttackResponse>(NULL);
  }

  AttackResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttackResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttackResponse& from);
  void MergeFrom(const AttackResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 issucc = 1;
  void clear_issucc();
  static const int kIssuccFieldNumber = 1;
  ::google::protobuf::int32 issucc() const;
  void set_issucc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.AttackResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 issucc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Chat* other);
  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const final {
    return CreateMaybeMessage<Chat>(NULL);
  }

  Chat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // string receivername = 2;
  void clear_receivername();
  static const int kReceivernameFieldNumber = 2;
  const ::std::string& receivername() const;
  void set_receivername(const ::std::string& value);
  #if LANG_CXX11
  void set_receivername(::std::string&& value);
  #endif
  void set_receivername(const char* value);
  void set_receivername(const char* value, size_t size);
  ::std::string* mutable_receivername();
  ::std::string* release_receivername();
  void set_allocated_receivername(::std::string* receivername);

  // string sendername = 3;
  void clear_sendername();
  static const int kSendernameFieldNumber = 3;
  const ::std::string& sendername() const;
  void set_sendername(const ::std::string& value);
  #if LANG_CXX11
  void set_sendername(::std::string&& value);
  #endif
  void set_sendername(const char* value);
  void set_sendername(const char* value, size_t size);
  ::std::string* mutable_sendername();
  ::std::string* release_sendername();
  void set_allocated_sendername(::std::string* sendername);

  // @@protoc_insertion_point(class_scope:pb.Chat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr receivername_;
  ::google::protobuf::internal::ArenaStringPtr sendername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ChatBack) */ {
 public:
  ChatBack();
  virtual ~ChatBack();

  ChatBack(const ChatBack& from);

  inline ChatBack& operator=(const ChatBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatBack(ChatBack&& from) noexcept
    : ChatBack() {
    *this = ::std::move(from);
  }

  inline ChatBack& operator=(ChatBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatBack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatBack* internal_default_instance() {
    return reinterpret_cast<const ChatBack*>(
               &_ChatBack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ChatBack* other);
  friend void swap(ChatBack& a, ChatBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatBack* New() const final {
    return CreateMaybeMessage<ChatBack>(NULL);
  }

  ChatBack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatBack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatBack& from);
  void MergeFrom(const ChatBack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 succ = 1;
  void clear_succ();
  static const int kSuccFieldNumber = 1;
  ::google::protobuf::int32 succ() const;
  void set_succ(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ChatBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 succ_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReceiveChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.ReceiveChat) */ {
 public:
  ReceiveChat();
  virtual ~ReceiveChat();

  ReceiveChat(const ReceiveChat& from);

  inline ReceiveChat& operator=(const ReceiveChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceiveChat(ReceiveChat&& from) noexcept
    : ReceiveChat() {
    *this = ::std::move(from);
  }

  inline ReceiveChat& operator=(ReceiveChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceiveChat* internal_default_instance() {
    return reinterpret_cast<const ReceiveChat*>(
               &_ReceiveChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ReceiveChat* other);
  friend void swap(ReceiveChat& a, ReceiveChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceiveChat* New() const final {
    return CreateMaybeMessage<ReceiveChat>(NULL);
  }

  ReceiveChat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReceiveChat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReceiveChat& from);
  void MergeFrom(const ReceiveChat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sendername = 1;
  void clear_sendername();
  static const int kSendernameFieldNumber = 1;
  const ::std::string& sendername() const;
  void set_sendername(const ::std::string& value);
  #if LANG_CXX11
  void set_sendername(::std::string&& value);
  #endif
  void set_sendername(const char* value);
  void set_sendername(const char* value, size_t size);
  ::std::string* mutable_sendername();
  ::std::string* release_sendername();
  void set_allocated_sendername(::std::string* sendername);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:pb.ReceiveChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sendername_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_allmsg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string playername = 1;
inline void Login::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::playername() const {
  // @@protoc_insertion_point(field_get:pb.Login.playername)
  return playername_.GetNoArena();
}
inline void Login::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Login.playername)
}
#if LANG_CXX11
inline void Login::set_playername(::std::string&& value) {
  
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Login.playername)
}
#endif
inline void Login::set_playername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Login.playername)
}
inline void Login::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Login.playername)
}
inline ::std::string* Login::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:pb.Login.playername)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_playername() {
  // @@protoc_insertion_point(field_release:pb.Login.playername)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:pb.Login.playername)
}

// -------------------------------------------------------------------

// RequestList

// int32 id = 1;
inline void RequestList::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RequestList::id() const {
  // @@protoc_insertion_point(field_get:pb.RequestList.id)
  return id_;
}
inline void RequestList::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RequestList.id)
}

// -------------------------------------------------------------------

// PlayerList

// repeated string playernamelist = 1;
inline int PlayerList::playernamelist_size() const {
  return playernamelist_.size();
}
inline void PlayerList::clear_playernamelist() {
  playernamelist_.Clear();
}
inline const ::std::string& PlayerList::playernamelist(int index) const {
  // @@protoc_insertion_point(field_get:pb.PlayerList.playernamelist)
  return playernamelist_.Get(index);
}
inline ::std::string* PlayerList::mutable_playernamelist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PlayerList.playernamelist)
  return playernamelist_.Mutable(index);
}
inline void PlayerList::set_playernamelist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.PlayerList.playernamelist)
  playernamelist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PlayerList::set_playernamelist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:pb.PlayerList.playernamelist)
  playernamelist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PlayerList::set_playernamelist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playernamelist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.PlayerList.playernamelist)
}
inline void PlayerList::set_playernamelist(int index, const char* value, size_t size) {
  playernamelist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.PlayerList.playernamelist)
}
inline ::std::string* PlayerList::add_playernamelist() {
  // @@protoc_insertion_point(field_add_mutable:pb.PlayerList.playernamelist)
  return playernamelist_.Add();
}
inline void PlayerList::add_playernamelist(const ::std::string& value) {
  playernamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.PlayerList.playernamelist)
}
#if LANG_CXX11
inline void PlayerList::add_playernamelist(::std::string&& value) {
  playernamelist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb.PlayerList.playernamelist)
}
#endif
inline void PlayerList::add_playernamelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playernamelist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.PlayerList.playernamelist)
}
inline void PlayerList::add_playernamelist(const char* value, size_t size) {
  playernamelist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.PlayerList.playernamelist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlayerList::playernamelist() const {
  // @@protoc_insertion_point(field_list:pb.PlayerList.playernamelist)
  return playernamelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlayerList::mutable_playernamelist() {
  // @@protoc_insertion_point(field_mutable_list:pb.PlayerList.playernamelist)
  return &playernamelist_;
}

// -------------------------------------------------------------------

// LoginBack

// int32 succ = 1;
inline void LoginBack::clear_succ() {
  succ_ = 0;
}
inline ::google::protobuf::int32 LoginBack::succ() const {
  // @@protoc_insertion_point(field_get:pb.LoginBack.succ)
  return succ_;
}
inline void LoginBack::set_succ(::google::protobuf::int32 value) {
  
  succ_ = value;
  // @@protoc_insertion_point(field_set:pb.LoginBack.succ)
}

// .pb.PlayerList playerlist = 2;
inline bool LoginBack::has_playerlist() const {
  return this != internal_default_instance() && playerlist_ != NULL;
}
inline void LoginBack::clear_playerlist() {
  if (GetArenaNoVirtual() == NULL && playerlist_ != NULL) {
    delete playerlist_;
  }
  playerlist_ = NULL;
}
inline const ::pb::PlayerList& LoginBack::_internal_playerlist() const {
  return *playerlist_;
}
inline const ::pb::PlayerList& LoginBack::playerlist() const {
  const ::pb::PlayerList* p = playerlist_;
  // @@protoc_insertion_point(field_get:pb.LoginBack.playerlist)
  return p != NULL ? *p : *reinterpret_cast<const ::pb::PlayerList*>(
      &::pb::_PlayerList_default_instance_);
}
inline ::pb::PlayerList* LoginBack::release_playerlist() {
  // @@protoc_insertion_point(field_release:pb.LoginBack.playerlist)
  
  ::pb::PlayerList* temp = playerlist_;
  playerlist_ = NULL;
  return temp;
}
inline ::pb::PlayerList* LoginBack::mutable_playerlist() {
  
  if (playerlist_ == NULL) {
    auto* p = CreateMaybeMessage<::pb::PlayerList>(GetArenaNoVirtual());
    playerlist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pb.LoginBack.playerlist)
  return playerlist_;
}
inline void LoginBack::set_allocated_playerlist(::pb::PlayerList* playerlist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerlist_;
  }
  if (playerlist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerlist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerlist, submessage_arena);
    }
    
  } else {
    
  }
  playerlist_ = playerlist;
  // @@protoc_insertion_point(field_set_allocated:pb.LoginBack.playerlist)
}

// -------------------------------------------------------------------

// GameServerInfo

// int32 curload = 1;
inline void GameServerInfo::clear_curload() {
  curload_ = 0;
}
inline ::google::protobuf::int32 GameServerInfo::curload() const {
  // @@protoc_insertion_point(field_get:pb.GameServerInfo.curload)
  return curload_;
}
inline void GameServerInfo::set_curload(::google::protobuf::int32 value) {
  
  curload_ = value;
  // @@protoc_insertion_point(field_set:pb.GameServerInfo.curload)
}

// int32 maxload = 2;
inline void GameServerInfo::clear_maxload() {
  maxload_ = 0;
}
inline ::google::protobuf::int32 GameServerInfo::maxload() const {
  // @@protoc_insertion_point(field_get:pb.GameServerInfo.maxload)
  return maxload_;
}
inline void GameServerInfo::set_maxload(::google::protobuf::int32 value) {
  
  maxload_ = value;
  // @@protoc_insertion_point(field_set:pb.GameServerInfo.maxload)
}

// string IPaddress = 3;
inline void GameServerInfo::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameServerInfo::ipaddress() const {
  // @@protoc_insertion_point(field_get:pb.GameServerInfo.IPaddress)
  return ipaddress_.GetNoArena();
}
inline void GameServerInfo::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.GameServerInfo.IPaddress)
}
#if LANG_CXX11
inline void GameServerInfo::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GameServerInfo.IPaddress)
}
#endif
inline void GameServerInfo::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GameServerInfo.IPaddress)
}
inline void GameServerInfo::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GameServerInfo.IPaddress)
}
inline ::std::string* GameServerInfo::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:pb.GameServerInfo.IPaddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameServerInfo::release_ipaddress() {
  // @@protoc_insertion_point(field_release:pb.GameServerInfo.IPaddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameServerInfo::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.GameServerInfo.IPaddress)
}

// int32 portNum = 4;
inline void GameServerInfo::clear_portnum() {
  portnum_ = 0;
}
inline ::google::protobuf::int32 GameServerInfo::portnum() const {
  // @@protoc_insertion_point(field_get:pb.GameServerInfo.portNum)
  return portnum_;
}
inline void GameServerInfo::set_portnum(::google::protobuf::int32 value) {
  
  portnum_ = value;
  // @@protoc_insertion_point(field_set:pb.GameServerInfo.portNum)
}

// -------------------------------------------------------------------

// GameServerInfoBack

// int32 succ = 1;
inline void GameServerInfoBack::clear_succ() {
  succ_ = 0;
}
inline ::google::protobuf::int32 GameServerInfoBack::succ() const {
  // @@protoc_insertion_point(field_get:pb.GameServerInfoBack.succ)
  return succ_;
}
inline void GameServerInfoBack::set_succ(::google::protobuf::int32 value) {
  
  succ_ = value;
  // @@protoc_insertion_point(field_set:pb.GameServerInfoBack.succ)
}

// -------------------------------------------------------------------

// RequestIP

// int32 id = 1;
inline void RequestIP::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 RequestIP::id() const {
  // @@protoc_insertion_point(field_get:pb.RequestIP.id)
  return id_;
}
inline void RequestIP::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.RequestIP.id)
}

// -------------------------------------------------------------------

// ResponseIP

// string IPaddress = 1;
inline void ResponseIP::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseIP::ipaddress() const {
  // @@protoc_insertion_point(field_get:pb.ResponseIP.IPaddress)
  return ipaddress_.GetNoArena();
}
inline void ResponseIP::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ResponseIP.IPaddress)
}
#if LANG_CXX11
inline void ResponseIP::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ResponseIP.IPaddress)
}
#endif
inline void ResponseIP::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ResponseIP.IPaddress)
}
inline void ResponseIP::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ResponseIP.IPaddress)
}
inline ::std::string* ResponseIP::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:pb.ResponseIP.IPaddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseIP::release_ipaddress() {
  // @@protoc_insertion_point(field_release:pb.ResponseIP.IPaddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseIP::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:pb.ResponseIP.IPaddress)
}

// int32 portNum = 2;
inline void ResponseIP::clear_portnum() {
  portnum_ = 0;
}
inline ::google::protobuf::int32 ResponseIP::portnum() const {
  // @@protoc_insertion_point(field_get:pb.ResponseIP.portNum)
  return portnum_;
}
inline void ResponseIP::set_portnum(::google::protobuf::int32 value) {
  
  portnum_ = value;
  // @@protoc_insertion_point(field_set:pb.ResponseIP.portNum)
}

// -------------------------------------------------------------------

// AttackRequest

// string offendername = 1;
inline void AttackRequest::clear_offendername() {
  offendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttackRequest::offendername() const {
  // @@protoc_insertion_point(field_get:pb.AttackRequest.offendername)
  return offendername_.GetNoArena();
}
inline void AttackRequest::set_offendername(const ::std::string& value) {
  
  offendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.AttackRequest.offendername)
}
#if LANG_CXX11
inline void AttackRequest::set_offendername(::std::string&& value) {
  
  offendername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AttackRequest.offendername)
}
#endif
inline void AttackRequest::set_offendername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  offendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AttackRequest.offendername)
}
inline void AttackRequest::set_offendername(const char* value, size_t size) {
  
  offendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AttackRequest.offendername)
}
inline ::std::string* AttackRequest::mutable_offendername() {
  
  // @@protoc_insertion_point(field_mutable:pb.AttackRequest.offendername)
  return offendername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttackRequest::release_offendername() {
  // @@protoc_insertion_point(field_release:pb.AttackRequest.offendername)
  
  return offendername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttackRequest::set_allocated_offendername(::std::string* offendername) {
  if (offendername != NULL) {
    
  } else {
    
  }
  offendername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offendername);
  // @@protoc_insertion_point(field_set_allocated:pb.AttackRequest.offendername)
}

// string attackername = 2;
inline void AttackRequest::clear_attackername() {
  attackername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttackRequest::attackername() const {
  // @@protoc_insertion_point(field_get:pb.AttackRequest.attackername)
  return attackername_.GetNoArena();
}
inline void AttackRequest::set_attackername(const ::std::string& value) {
  
  attackername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.AttackRequest.attackername)
}
#if LANG_CXX11
inline void AttackRequest::set_attackername(::std::string&& value) {
  
  attackername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.AttackRequest.attackername)
}
#endif
inline void AttackRequest::set_attackername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attackername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.AttackRequest.attackername)
}
inline void AttackRequest::set_attackername(const char* value, size_t size) {
  
  attackername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.AttackRequest.attackername)
}
inline ::std::string* AttackRequest::mutable_attackername() {
  
  // @@protoc_insertion_point(field_mutable:pb.AttackRequest.attackername)
  return attackername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttackRequest::release_attackername() {
  // @@protoc_insertion_point(field_release:pb.AttackRequest.attackername)
  
  return attackername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttackRequest::set_allocated_attackername(::std::string* attackername) {
  if (attackername != NULL) {
    
  } else {
    
  }
  attackername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attackername);
  // @@protoc_insertion_point(field_set_allocated:pb.AttackRequest.attackername)
}

// -------------------------------------------------------------------

// AttackResponse

// int32 issucc = 1;
inline void AttackResponse::clear_issucc() {
  issucc_ = 0;
}
inline ::google::protobuf::int32 AttackResponse::issucc() const {
  // @@protoc_insertion_point(field_get:pb.AttackResponse.issucc)
  return issucc_;
}
inline void AttackResponse::set_issucc(::google::protobuf::int32 value) {
  
  issucc_ = value;
  // @@protoc_insertion_point(field_set:pb.AttackResponse.issucc)
}

// -------------------------------------------------------------------

// Chat

// string msg = 1;
inline void Chat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::msg() const {
  // @@protoc_insertion_point(field_get:pb.Chat.msg)
  return msg_.GetNoArena();
}
inline void Chat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Chat.msg)
}
#if LANG_CXX11
inline void Chat::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Chat.msg)
}
#endif
inline void Chat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Chat.msg)
}
inline void Chat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Chat.msg)
}
inline ::std::string* Chat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.Chat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_msg() {
  // @@protoc_insertion_point(field_release:pb.Chat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.Chat.msg)
}

// string receivername = 2;
inline void Chat::clear_receivername() {
  receivername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::receivername() const {
  // @@protoc_insertion_point(field_get:pb.Chat.receivername)
  return receivername_.GetNoArena();
}
inline void Chat::set_receivername(const ::std::string& value) {
  
  receivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Chat.receivername)
}
#if LANG_CXX11
inline void Chat::set_receivername(::std::string&& value) {
  
  receivername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Chat.receivername)
}
#endif
inline void Chat::set_receivername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Chat.receivername)
}
inline void Chat::set_receivername(const char* value, size_t size) {
  
  receivername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Chat.receivername)
}
inline ::std::string* Chat::mutable_receivername() {
  
  // @@protoc_insertion_point(field_mutable:pb.Chat.receivername)
  return receivername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_receivername() {
  // @@protoc_insertion_point(field_release:pb.Chat.receivername)
  
  return receivername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_receivername(::std::string* receivername) {
  if (receivername != NULL) {
    
  } else {
    
  }
  receivername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receivername);
  // @@protoc_insertion_point(field_set_allocated:pb.Chat.receivername)
}

// string sendername = 3;
inline void Chat::clear_sendername() {
  sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Chat::sendername() const {
  // @@protoc_insertion_point(field_get:pb.Chat.sendername)
  return sendername_.GetNoArena();
}
inline void Chat::set_sendername(const ::std::string& value) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.Chat.sendername)
}
#if LANG_CXX11
inline void Chat::set_sendername(::std::string&& value) {
  
  sendername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Chat.sendername)
}
#endif
inline void Chat::set_sendername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Chat.sendername)
}
inline void Chat::set_sendername(const char* value, size_t size) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Chat.sendername)
}
inline ::std::string* Chat::mutable_sendername() {
  
  // @@protoc_insertion_point(field_mutable:pb.Chat.sendername)
  return sendername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_sendername() {
  // @@protoc_insertion_point(field_release:pb.Chat.sendername)
  
  return sendername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_sendername(::std::string* sendername) {
  if (sendername != NULL) {
    
  } else {
    
  }
  sendername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendername);
  // @@protoc_insertion_point(field_set_allocated:pb.Chat.sendername)
}

// -------------------------------------------------------------------

// ChatBack

// int32 succ = 1;
inline void ChatBack::clear_succ() {
  succ_ = 0;
}
inline ::google::protobuf::int32 ChatBack::succ() const {
  // @@protoc_insertion_point(field_get:pb.ChatBack.succ)
  return succ_;
}
inline void ChatBack::set_succ(::google::protobuf::int32 value) {
  
  succ_ = value;
  // @@protoc_insertion_point(field_set:pb.ChatBack.succ)
}

// -------------------------------------------------------------------

// ReceiveChat

// string sendername = 1;
inline void ReceiveChat::clear_sendername() {
  sendername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceiveChat::sendername() const {
  // @@protoc_insertion_point(field_get:pb.ReceiveChat.sendername)
  return sendername_.GetNoArena();
}
inline void ReceiveChat::set_sendername(const ::std::string& value) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReceiveChat.sendername)
}
#if LANG_CXX11
inline void ReceiveChat::set_sendername(::std::string&& value) {
  
  sendername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReceiveChat.sendername)
}
#endif
inline void ReceiveChat::set_sendername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReceiveChat.sendername)
}
inline void ReceiveChat::set_sendername(const char* value, size_t size) {
  
  sendername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReceiveChat.sendername)
}
inline ::std::string* ReceiveChat::mutable_sendername() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReceiveChat.sendername)
  return sendername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceiveChat::release_sendername() {
  // @@protoc_insertion_point(field_release:pb.ReceiveChat.sendername)
  
  return sendername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiveChat::set_allocated_sendername(::std::string* sendername) {
  if (sendername != NULL) {
    
  } else {
    
  }
  sendername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendername);
  // @@protoc_insertion_point(field_set_allocated:pb.ReceiveChat.sendername)
}

// string msg = 2;
inline void ReceiveChat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceiveChat::msg() const {
  // @@protoc_insertion_point(field_get:pb.ReceiveChat.msg)
  return msg_.GetNoArena();
}
inline void ReceiveChat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.ReceiveChat.msg)
}
#if LANG_CXX11
inline void ReceiveChat::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.ReceiveChat.msg)
}
#endif
inline void ReceiveChat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.ReceiveChat.msg)
}
inline void ReceiveChat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.ReceiveChat.msg)
}
inline ::std::string* ReceiveChat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:pb.ReceiveChat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceiveChat::release_msg() {
  // @@protoc_insertion_point(field_release:pb.ReceiveChat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceiveChat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:pb.ReceiveChat.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_allmsg_2eproto
